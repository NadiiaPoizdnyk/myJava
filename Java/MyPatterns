

1. //exceptions INPUT
Scanner sc = new Scanner(System.in);
String s;
Pattern pattern = Pattern.compile("[1-9]{1}");
Matcher matcher;

do {
    System.out.print("Type a number from 1 to 9: ");
    s = sc.nextLine();
    matcher = pattern.matcher(s);
    if (!matcher.matches()) System.out.println("Sorry! Invalid value has been entered");
} while (!matcher.matches());

sc.close();
	--------------------------------------------------	

	
2. //exceptions INPUT
Scanner scanner = new Scanner(System.in);
boolean index = false;
String string;
 while (index!=true){
            System.out.print("Type in the matrix size from 1 to 20: ");
            string = scanner.nextLine();
            try {
                size = Integer.parseInt(string);
                if(size >= 1  && size <= 20){
                    index = true;
                }
                else{
                    index = false;
                }
            } catch (NumberFormatException e) {
                System.out.println("Sorry! Invalid value has been entered");
            }
        }



	--------------------------------------------------	
3.//exceptions INPUT
 boolean adv = false;
 Scanner sc = new Scanner(System.in);

while (!adv){
    System.out.print("Please, enter array length: ");
    String str = sc.nextLine();

     // verify 1)negative numbers; 2)special signs; 3)empty value; 4)letters;
     // 5)whitespace + letter/numbers
     try {
        size = Integer.valueOf(str); //Use Integer.parseInt()/.valueOf() methods to validate the integer input.

        //verify negative numbers input --> invalid value
        if (size <= 0){
            System.out.print("Error! Invalid value has been entered! ");
            adv = false;
        }
        if (size > 0){
			adv = true;
        }
        break;
    } catch (NumberFormatException e) {
        System.out.println("Sorry! Invalid value has been entered. ");
    }
}

	--------------------------------------------------	
4. SAVE TO FILE
static void saveMatrixToFile(int[][] matrix, String path) throws IOException {

        try {
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(path));
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[i].length; j++) {
                    bufferedWriter.write(String.valueOf(matrix[i][j]) + " ");
                }
                bufferedWriter.newLine();
            }
            bufferedWriter.flush();
            bufferedWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
	
	
	--------------------------------------------------	
5. LOAD FROM FILE
static int[][] loadMatrixFromFile(int size, String path) {
        int[][] matrix = new int[size][size];
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            for (int i = 0; i < matrix.length; i++) {
                String[] strArr = br.readLine().trim().split(" ");
                for (int j = 0; j < matrix[i].length; j++) {
                    matrix[i][j] = Integer.parseInt(strArr[j]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return matrix;
    }